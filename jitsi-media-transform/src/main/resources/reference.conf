jmt {
  bwe {
    send-side {
      low-loss-threshold = 0.02
      high-loss-threshold = 0.1
      bitrate-threshold = 100 kbps

      loss-experiment {
        probability = 0
        low-loss-threshold = ${jmt.bwe.send-side.low-loss-threshold}
        high-loss-threshold = ${jmt.bwe.send-side.high-loss-threshold}
        bitrate-threshold = ${jmt.bwe.send-side.bitrate-threshold}
      }

      timeout-experiment {
        probability = 0
      }
    }

    google-cc {
      min-bw = 30 kbps
      max-bw = 20 mbps
    }

    overuse-detector {
      initial-threshold = 25.0
      overusing-time-threshold = 100.0
    }
  }
  dtls {
    // The maximum length of time to wait for a DTLS handshake to complete.
    handshake-timeout = 30 seconds
  }
  srtp {
    // The maximum number of packets that can be discarded early (without going through the SRTP stack for
    // authentication), or -1 to authenticate all packets.
    // This is useful to avoid unnecessary computation for audio silence.
    max-consecutive-packets-discarded-early=-1

    // The DTLS-SRTP protection profiles that are supported, in preference order.
    protection-profiles=[
        "SRTP_AEAD_AES_128_GCM",
        "SRTP_AES128_CM_HMAC_SHA1_80"
    ]

    // The engine (cryptographic provider) to use for SRTP cryptography.
    // Valid values are "OpenSSL", "SunJCE", "SunPKCS11", "BouncyCastle",
    // or null to let the implementation pick the provider at runtime.
    // "OpenSSL" is currently only supported on Linux (x86_64, arm64, and ppc64el)
    // and macOS (x86_64 and arm64).
    // Custom class values are also possible - see Aes.setFactoryClassName
    // in jitsi-srtp for more details.
    // Generally the best performance will be obtained by "OpenSSL" where supported,
    // and "SunJCE" otherwise, but see the logs for the measured performance of
    // each provider.
    factory-class="OpenSSL"
  }
  audio {
    red {
      // The policy for handling RED. The valid values are:
      // NOOP: does not strip RED from incoming streams (unless the receiver lacks RED support), and does not
      //     encapsulate audio streams in RED.
      // STRIP: strips RED from all incoming streams (recovering lost packets)
      // PROTECT_ALL: encapsulates all forwarded audio streams in RED (unless they are already RED encoded, or the
      //     receiver lacks RED support).
      policy = NOOP
      // The "distance" to use when encoding streams in RED. The valid values are:
      // ONE: encode only the previous packet as redundancy (increasing bitrate by ~100%)
      // TWO: encode the previous two packets as redundancy (increasing bitrate by ~200%, but further increasing
      //     resilience)
      distance = TWO
      // Whether redundancy should be added for all packets (if `false`), or just packets with the Voice Activity
      // Detection bit set (if `true`).
      vad-only = true
    }
    level {
      // Number of RTP packets with 0 audio level to forward before start discarding (to avoid CNG noise in muted state
      // if DTX is enabled).
      forwarded-silence-packets-limit = 3
    }
  }

  rtp {
    // The node which calculates the bitrates of the incoming RTP streams and layers.
    bitrate-calculator {
      // The window over which average bitrate is calculated.
      window-size = 5 seconds
      // The bucket size used to calculate average bitrate (smaller bucket size provides more precision, but requires
      // more memory). This must evenly divide [window-size].
      bucket-size = 100ms
    }
  }

  transceiver {
      recv {
        // The size of the queue that handles incoming rtp/rtcp packets. This is
        // a per-participant queue and it's where we temporarily store the
        // packets that the endpoint is sending, right after an srtp packet has
        // been received.
        //
        // Assuming 300pps for high-definition, 200pps for standard-definition,
        // 100pps for low-definition and 50pps for audio, this queue is fed
        // 650pps, so its size in terms of millis is 1024/650*1000 ~= 1575ms.
        queue-size=1024
      }

      send {
        // The size of the queue that handles outgoing rtp/rtcp packets. This is
        // a per-participant queue and it's where we temporarily store the
        // packets right after the ingress pipeline has run.
        //
        // Packets from all the other endpoints in a call end up in the send
        // queue.
        //
        // In a 100 participant call, assuming 300pps for the on-stage and
        // 100pps for low-definition, last-n 20 and 2 participants talking, so
        // 2*50pps for audio, this queue is fed 300+19*100+2*50 = 2300pps, so its
        // size in terms of millis is 1024/2300*1000 ~= 445ms.
        queue-size=1024
      }
  }

  debug {
    pcap {
      // Whether to permit the API to dynamically enable the capture of
      // unencrypted PCAP files of media traffic.
      enabled=false
    }
    packet-loss {
      // Artificial loss to introduce in the receive pipeline.
      incoming {
        // Rate of random packet loss with uniform distribution.
        uniform-rate = 0 %
        // Bursty-loss: drops [burst-size] consecutive packets in every [burst-interval] packets. Applied prior to
        // uniform loss.
        burst-size = 0
        burst-interval = 0
      }
      // Artificial loss to introduce in the send pipeline.
      outgoing {
        // Rate of random packet loss with uniform distribution.
        uniform-rate = 0 %
        // Bursty-loss: drops [burst-size] consecutive packets in every [burst-interval] packets. Applied prior to
        // uniform loss
        burst-size = 0
        burst-interval = 0
      }
    }
  }
}
