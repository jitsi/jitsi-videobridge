<project name="jvb-debian" basedir=".">

    <!-- Debian related targets -->

    <property name="debian.release" value="release/jvb"/>
    <property name="debian.dir" value="${debian.release}/debian"/>
    <property name="debian.binary.dir" value="${debian.dir}/binary"/>
    <property name="dpkg-scanpackages" value="/usr/bin/dpkg-scanpackages"/>
    <property name="dpkg-buildpackage" value="/usr/bin/dpkg-buildpackage"/>
    <property name="dh_testdir" value="/usr/bin/dh_testdir"/>

    <property name="tinder.folder" value="lib/src/tinder-1.2.2"/>

    <!-- Can we build debian packages? -->
    <condition property="dpkg.build.present">
        <and>
            <available file="${dpkg-buildpackage}"/>
            <available file="${dh_testdir}"/>
        </and>
    </condition>
    <!-- Can we deploy debian packages? -->
    <condition property="dpkg.scan.present">
        <available file="${dpkg-scanpackages}"/>
    </condition>

    <!-- Outputs a warning notifying the user that a dpkg tool is missing. -->
    <target name="dpkg-build-warning" unless="dpkg.build.present">
        <echo message="Either the ${dpkg-buildpackage} tool or the debhelper tools was not found on your system."/>
        <echo message="Try installing the 'dpkg-dev' and 'debhelper' packages"/>
    </target>

    <!--
        if label is "build.SVN" we don't have version to update
        the changelog with
    <target name="check-version">
        <condition property="version.not.numeric">
            <matches pattern="build.SVN" string="${label}"/>
        </condition>
    </target>-->

    <!--
        Updates changelog and version. Called only when "label" is a number.
    -->
    <target name="deb-bump-version">
        <!-- preparing the release folder for new build -->
        <delete dir="${debian.dir}"/>
        <mkdir dir="${debian.dir}"/>

        <!-- create new changelog and fill up the new version and date -->
        <copy file="resources/install/debian/changelog.tmpl"
              tofile="${debian.dir}/changelog"
              overwrite="true"/>

        <tstamp>
            <format property="date"
                    pattern="EEE, d MMM yyyy HH:mm:ss Z" locale="en,US"/>
        </tstamp>
        <replace file="${debian.dir}/changelog"
                 token="_DATE_" value="${date}"/>
        <replace file="${debian.dir}/changelog"
                 token="_VERSION_" value="${label}-1"/>
    </target>

    <!-- Builds the debian package. -->
    <target name="deb"
            depends="copy-runtime-dependencies-from-maven,make,dpkg-build-warning,deb-bump-version">

        <copy todir="${debian.dir}" includeEmptyDirs="Yes">
            <fileset dir="resources/install/debian">
                <include name="**"/>
                <exclude name="*.src"/>
                <exclude name="patches/**"/><!-- we use patches only for deb-src -->
            </fileset>
        </copy>

        <mkdir dir="${debian.dir}/usr/share/jitsi-videobridge"/>
        <copy todir="${debian.dir}/usr/share/jitsi-videobridge/lib"
              overwrite="true" includeEmptyDirs="No">
            <fileset dir="lib/">
                <exclude name="logging.properties"/>
            </fileset>
        </copy>
        <copy file="jitsi-videobridge.jar"
              todir="${debian.dir}/usr/share/jitsi-videobridge"
              overwrite="true"/>
        <copy file="lib/logging.properties"
              todir="${debian.dir}/etc/jitsi/videobridge"
              overwrite="true"/>
        <copy file="resources/install/jvb.sh"
              todir="${debian.dir}/usr/share/jitsi-videobridge"
              overwrite="true"/>
        <chmod file="${debian.dir}/usr/share/jitsi-videobridge/jvb.sh"
               perm="755"/>
        <copy file="resources/graceful_shutdown.sh"
              todir="${debian.dir}/usr/share/jitsi-videobridge"
              overwrite="true"/>
        <chmod file="${debian.dir}/usr/share/jitsi-videobridge/graceful_shutdown.sh"
               perm="755"/>
        <copy file="resources/collect-dump-logs.sh"
              todir="${debian.dir}/usr/share/jitsi-videobridge"
              overwrite="true"/>
        <chmod file="${debian.dir}/usr/share/jitsi-videobridge/collect-dump-logs.sh"
               perm="755"/>

        <!-- callstats-java-sdk -->
        <copy file="config/log4j2.xml"
              todir="${debian.dir}/etc/jitsi/videobridge"
              overwrite="true"/>
        <replace file="${debian.dir}/etc/jitsi/videobridge/log4j2.xml"
                 token="logs">
            <replacevalue>/var/log/jitsi</replacevalue>
        </replace>
        <copy file="config/callstats-java-sdk.properties"
              todir="${debian.dir}/etc/jitsi/videobridge"
              overwrite="true"/>
        <copy file="config/logrotate"
              tofile="${debian.dir}/etc/logrotate.d/jitsi-videobridge"
              overwrite="true"/>
        <copy file="config/20-jvb-udp-buffers.conf"
              todir="${debian.dir}/etc/sysctl.d/"
              overwrite="true"/>

        <!-- creating a debian archive file
        <tar destfile="jitsi-videobridge_${label}-1.debian.tar.gz"
             basedir="${debian.release}" includes="debian/"
             defaultexcludes="No" compression="gzip"/>-->

        <!-- creating empty orig file
        <touch file="jitsi-videobridge"/>
        <tar destfile="release/jitsi-videobridge_${label}-1.orig.tar.gz"
             compression="gzip">
            <tarfileset file="jitsi-videobridge"/>
        </tar>
        <delete file="jitsi-videobridge"/>-->

        <!-- and build it -->
        <exec executable="${dpkg-buildpackage}" dir="${debian.dir}/../">
            <arg value="-tc"/>
            <arg value="-us"/>
            <arg value="-uc"/>
            <arg value="-b"/>
            <arg value="-d"/>
        </exec>

        <!-- clean up the build folder -->
        <delete dir="${debian.release}"/>

    </target>

    <target name="deb-src" depends="deb-copy-jitsi-videobridge">

        <unzip src="../libsrc/jitsi-android-osgi.zip"
               dest="${debian.release}/lib/src/jitsi-android-osgi">
            <patternset>
                <exclude name="**/test/**"/>
                <exclude name="**/test-lib/**"/>
                <exclude name="**/*.iml"/>
                <exclude name="**/*.jar"/>
            </patternset>
        </unzip>

        <unzip src="../libsrc/tinder_src_1_2_2.zip"
               dest="${debian.release}/lib/src/">
            <patternset>
                <exclude name="**/test/**"/>
                <exclude name="**/*.jar"/>
            </patternset>
        </unzip>
        <unzip src="../libsrc/whack-trunk.zip"
               dest="${debian.release}/lib/src/">
            <patternset>
                <exclude name="**/test/**"/>
                <exclude name="**/*.jar"/>
                <exclude name="**/.cvsignore"/>
            </patternset>
        </unzip>

        <!-- pack as original sources -->
        <tar destfile="release/jitsi-videobridge_${label}.orig.tar.gz"
             compression="gzip"
             basedir="release"/>
        <delete failonerror="false" includeemptydirs="true">
            <fileset dir="${debian.release}"/>
        </delete>
    </target>

    <target name="deb-copy-jitsi-videobridge">
        <mkdir dir="${debian.release}/lib/src"/>

        <antcall target="deb-bump-version" />

        <copy todir="${debian.release}">
            <fileset dir=".">
                <include name="src/**"/>
                <include name="lib/logging.properties"/>
                <include name="build.xml"/>
                <include name="resources/install/build-debian.xml"/>
                <include name="resources/install/jvb.sh"/>
            </fileset>
        </copy>
        <replace file="${debian.release}/resources/install/jvb.sh"
                 token="$SCRIPT_DIR/lib/native/linux">
            <replacevalue>/usr/lib/jni</replacevalue>
        </replace>
        <replace file="${debian.release}/resources/install/jvb.sh"
                 token="$SCRIPT_DIR/lib/native/linux-64">
            <replacevalue>/usr/lib/jni</replacevalue>
        </replace>
        <copy todir="${debian.release}">
            <fileset dir="resources/install/">
                <include name="debian/**"/>
                <exclude name="**/changelog.Debian.gz"/>
                <exclude name="debian/changelog.tmpl"/>
                <exclude name="debian/control"/>
                <exclude name="debian/install"/>
                <exclude name="debian/source/include-binaries"/>
            </fileset>
        </copy>
        <move file="${debian.release}/debian/control.src"
              tofile="${debian.release}/debian/control"/>
        <move file="${debian.release}/debian/install.src"
              tofile="${debian.release}/debian/install"/>

        <!-- adds the stuff that will build the needed libs -->
        <echo file="${debian.release}/debian/rules"
              append="true">
override_dh_auto_build:
&#009;dh_auto_build -- deb-src-rebuild

override_dh_auto_clean:
&#009;dh_auto_clean -- clean-debuild

override_dh_install-arch:
ifeq ($(DEB_HOST_ARCH),amd64)
&#009;dh_install resources/install/jvb.sh usr/share/jitsi-videobridge
else
&#009;dh_install resources/install/jvb.sh usr/share/jitsi-videobridge
endif
&#009;chmod +x debian/jitsi-videobridge/usr/share/jitsi-videobridge/jvb.sh

</echo>

    </target>

    <target name="deb-src-rebuild">

        <symlink resource="/usr/share/libjitsi/lib/bccontrib.jar"
                 link="lib"/>
        <symlink resource="/usr/share/java/bcprov.jar"
                 link="lib"/>
        <symlink resource="/usr/share/java/concurrentlinkedhashmap-lru.jar"
                 link="lib"/>
        <symlink resource="/usr/share/jitsi-common/configuration.jar"
                 link="lib"/>
        <symlink resource="/usr/share/jitsi-common/dns.jar"
                 link="lib"/>
        <symlink resource="/usr/share/jitsi-common/dnsservice.jar"
                 link="lib"/>
        <symlink resource="/usr/share/java/dom4j.jar"
                 link="lib"/>
        <symlink resource="/usr/share/jitsi-common/fileaccess.jar"
                 link="lib"/>
        <symlink resource="/usr/share/java/jetty8-http.jar"
                 link="lib"/>
        <symlink resource="/usr/share/java/jetty8-io.jar"
                 link="lib"/>
        <symlink resource="/usr/share/java/jetty8-server.jar"
                 link="lib"/>
        <symlink resource="/usr/share/java/jetty8-util.jar"
                 link="lib"/>
        <symlink resource="/usr/share/java/jetty8-servlets.jar"
                 link="lib"/>
        <symlink resource="/usr/share/java/jetty8-servlet.jar"
                 link="lib"/>
        <symlink resource="/usr/share/java/jetty8-rewrite.jar"
                 link="lib"/>

        <mkdir dir="lib/src/jitsi-android-osgi/classes"/>
        <javac debug="true"
               deprecation="true" destdir="lib/src/jitsi-android-osgi/classes"
               nowarn="false"
               source="1.6" target="1.6" fork="true">
            <src path="lib/src/jitsi-android-osgi/src"/>
            <include name="**/*.java" />
            <classpath>
                <fileset dir="/usr/share/java">
                    <include name="org.apache.felix.framework.jar"/>
                </fileset>
            </classpath>
        </javac>
        <jar compress="true" destfile="lib/jitsi-android-osgi.jar">
            <zipfileset dir="lib/src/jitsi-android-osgi/classes"/>
        </jar>

        <symlink resource="/usr/share/java/jna.jar"
                 link="lib"/>
        <symlink resource="/usr/share/java/json-simple.jar"
                 link="lib"/>
        <symlink resource="/usr/share/java/libidn.jar"
                 link="lib"/>
        <symlink resource="/usr/share/java/bcpkix.jar"
                 link="lib"/>
        <symlink resource="/usr/share/libjitsi/lib/fmj.jar"
                 link="lib"/>
        <symlink resource="/usr/share/jitsi-common/libjitsi.jar/libjitsi-impl.jar"
                 link="lib"/>
        <symlink resource="/usr/share/libjitsi/libjitsi.jar"
                 link="lib"/>
        <symlink resource="/usr/share/jitsi-common/netaddr.jar/netaddr.jar"
                 link="lib"/>
        <symlink resource="/usr/share/libjitsi/lib/ice4j.jar"
                 link="lib"/>
        <symlink resource="/usr/share/java/weupnp.jar"
                 link="lib"/>
        <symlink resource="/usr/share/java/org.apache.felix.framework.jar"
                 link="lib"/>
        <symlink resource="/usr/share/jitsi-common/packetlogging.jar"
                 link="lib"/>
        <symlink resource="/usr/share/jitsi-common/protocol.jar"
                 link="lib"/>
        <symlink resource="/usr/share/jitsi-common/protocol-jabber.jar"
                 link="lib"/>
        <symlink resource="/usr/share/jitsi-common/protocol-media.jar"
                 link="lib"/>
        <symlink resource="/usr/share/jitsi-common/resourcemanager.jar"
                 link="lib"/>
        <symlink resource="/usr/share/java/servlet-api-3.1.jar"
                 link="lib"/>
        <symlink resource="/usr/share/java/slf4j-api.jar"
                 link="lib"/>
        <symlink resource="/usr/share/java/slf4j-jdk14.jar"
                 link="lib"/>
        <symlink resource="/usr/share/jitsi-common/smacklib.jar/smacklib.jar"
                 link="lib"/>

        <mkdir dir="${tinder.folder}/classes"/>
        <javac debug="true"
               deprecation="true" destdir="${tinder.folder}/classes"
               nowarn="false"
               source="1.6" target="1.6" fork="true">
            <src path="${tinder.folder}/src/main/java"/>
            <include name="**/*.java" />
            <classpath>
                <fileset dir="/usr/share/java">
                    <include name="dom4j.jar"/>
                    <include name="slf4j-api.jar"/>
                    <include name="jcip-annotations.jar"/>
                    <include name="libidn.jar"/>
                    <include name="concurrentlinkedhashmap-lru.jar"/>
                </fileset>
            </classpath>
        </javac>
        <jar compress="true" destfile="lib/tinder.jar">
            <zipfileset dir="${tinder.folder}/classes"/>
        </jar>

        <!-- tinder -->
        <symlink resource="/usr/share/jitsi-common/ui-service.jar"
                 link="lib"/>
        <symlink resource="/usr/share/java/dnsjava.jar"
                 link="lib"/>
        <symlink resource="/usr/share/jitsi-common/util.jar/launchutils.jar"
                 link="lib"/>
        <symlink resource="/usr/share/jitsi-common/util.jar/util.jar"
                 link="lib"/>

        <symlink resource="/usr/share/java/dom4j.jar"
                 link="lib/src/whack/build/lib/merge"/>
        <symlink resource="/usr/share/java/jetty8-http.jar"
                 link="lib/src/whack/build/lib/merge"/>
        <symlink resource="/usr/share/java/jetty8-server.jar"
                 link="lib/src/whack/build/lib/merge"/>
        <symlink resource="/usr/share/java/jetty8-servlet.jar"
                 link="lib/src/whack/build/lib/merge"/>
        <symlink resource="/usr/share/java/jetty8-util.jar"
                 link="lib/src/whack/build/lib/merge"/>
        <symlink resource="/usr/share/java/jetty8-webapp.jar"
                 link="lib/src/whack/build/lib/merge"/>
        <symlink resource="/usr/share/java/servlet-api-3.1.jar"
                 link="lib/src/whack/build/lib/merge"/>
        <symlink resource="/usr/share/java/slf4j-api.jar"
                 link="lib/src/whack/build/lib/merge"/>
        <symlink resource="/usr/share/java/xpp3.jar"
                 link="lib/src/whack/build/lib/merge"/>
        <symlink resource="../../../../../tinder.jar"
                 link="lib/src/whack/build/lib/merge"/>
        <ant dir="lib/src/whack/build"
             useNativeBasedir="true"
             inheritAll="false"
             target="jar">
        </ant>
        <copy file="lib/src/whack/target/whack.jar" todir="lib"/>

        <!-- whack -->
        <symlink resource="/usr/share/java/xpp3.jar"
                 link="lib"/>
        <symlink resource="/usr/share/libjitsi/lib/zrtp4j-light.jar"
                 link="lib"/>

        <ant inheritAll="false"
             target="jar">
        </ant>

    </target>

    <target name="clean-debuild">

        <delete failonerror="false">
            <fileset dir="lib/src/whack/build/lib/merge">
                <include name="*.jar"/>
            </fileset>
            <fileset dir="lib">
                <include name="*.jar"/>
            </fileset>
        </delete>
        <delete dir="lib/src/jitsi-android-osgi/classes" failonerror="false"/>
        <delete dir="${tinder.folder}/classes" failonerror="false"/>
        <delete dir="lib/src/whack/target" failonerror="false"/>

    </target>

</project>
