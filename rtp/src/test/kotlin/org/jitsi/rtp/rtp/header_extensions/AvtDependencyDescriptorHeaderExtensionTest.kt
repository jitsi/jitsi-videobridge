package org.jitsi.rtp.rtp.header_extensions

import io.kotest.core.spec.IsolationMode
import io.kotest.core.spec.style.ShouldSpec
import io.kotest.matchers.shouldBe
import jakarta.xml.bind.DatatypeConverter.parseHexBinary

class AvtDependencyDescriptorHeaderExtensionTest : ShouldSpec() {
    override fun isolationMode(): IsolationMode = IsolationMode.InstancePerLeaf

    /* Headers generated by Chrome 110 sending AV1 in its default configuration - S1T1 */
    val longDesc1 = parseHexBinary("80000180003a410180ef808680")
    val longDesc2 = parseHexBinary("82007780403a4101813f80b380")
    val longDesc3 = parseHexBinary("8400d380803a410181df810d80")

    val shortDesc1 = parseHexBinary("400001")
    val shortDesc2 = parseHexBinary("870235")
    val shortDesc3 = parseHexBinary("07023a")

    init {
        context("AVT Dependency Descriptors") {
            should("be parsed properly") {
                val ld1 = Av1DependencyDescriptorHeaderExtension(longDesc1, 0, longDesc1.size, null)
                ld1.startOfFrame shouldBe true
                ld1.endOfFrame shouldBe false
                ld1.frameNumber shouldBe 0x0001

                ld1.spatialId shouldBe 0
                ld1.temporalId shouldBe 0

                ld1.templateDependencyStructurePresent shouldBe true
                val template = ld1.template
                template.decodeTargetCount shouldBe 1
            }
        }
    }
}
