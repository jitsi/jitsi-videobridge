package org.jitsi.rtp.rtp.header_extensions

import io.kotest.core.spec.IsolationMode
import io.kotest.core.spec.style.ShouldSpec
import io.kotest.matchers.shouldBe
import jakarta.xml.bind.DatatypeConverter.parseHexBinary

class AvtDependencyDescriptorHeaderExtensionTest : ShouldSpec() {
    override fun isolationMode(): IsolationMode = IsolationMode.InstancePerLeaf

    /* Headers generated by Chrome 110 sending AV1 in its default configuration - S1T1 */
    val longDesc1 = parseHexBinary("80000180003a410180ef808680")
    val longDesc2 = parseHexBinary("82007780403a4101813f80b380")
    val longDesc3 = parseHexBinary("8400d380803a410181df810d80")

    val shortDesc1 = parseHexBinary("400001")
    val shortDesc2 = parseHexBinary("870235")
    val shortDesc3 = parseHexBinary("07023a")

    /* Header generated by Chrome 112 sending AV1 with S3T3 set, and experimental features enabled. */
    val longDescScalable = parseHexBinary(
        "d0013481e81485214eafffaaaa863cf0430c10c302afc0aaa0063c00430010c002a000a800060000" +
            "40001d954926e082b04a0941b820ac1282503157f974000ca864330e222222eca8655304224230ec" +
            "a87753013f00b3027f016704ff02cf"
    )

    val midDescScalable = parseHexBinary("d10146401c")

    init {
        context("AVT Dependency Descriptors") {
            val ld1 = Av1DependencyDescriptorHeaderExtension(longDesc1, 0, longDesc1.size, null)
            should("be parsed properly (1)") {
                ld1.startOfFrame shouldBe true
                ld1.endOfFrame shouldBe false
                ld1.frameNumber shouldBe 0x0001

                ld1.spatialId shouldBe 0
                ld1.temporalId shouldBe 0

                ld1.templateDependencyStructurePresent shouldBe true
                val template = ld1.template
                template.decodeTargetCount shouldBe 1
            }
            val lds = Av1DependencyDescriptorHeaderExtension(longDescScalable, 0, longDescScalable.size, null)
            should("be parsed properly (2)") {
                lds.startOfFrame shouldBe true
                lds.endOfFrame shouldBe true
                lds.frameNumber shouldBe 0x0134

                lds.spatialId shouldBe 0
                lds.temporalId shouldBe 0

                lds.templateDependencyStructurePresent shouldBe true
                val template = lds.template
                template.decodeTargetCount shouldBe 9
            }
            should("be parsed properly (3)") {
                val mds = Av1DependencyDescriptorHeaderExtension(midDescScalable, 0, midDescScalable.size, lds.template)
                mds.startOfFrame shouldBe true
                mds.endOfFrame shouldBe true
                mds.frameNumber shouldBe 0x0146

                mds.spatialId shouldBe 0
                mds.temporalId shouldBe 1
            }
        }
    }
}
